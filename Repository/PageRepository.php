<?php

namespace Dywee\CMSBundle\Repository;

use Dywee\CMSBundle\Entity\Page;
use Gedmo\Tree\Entity\Repository\NestedTreeRepository;

/**
 * PageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
    class PageRepository extends NestedTreeRepository
{
    public function getForParent($website)
    {
        $queryBuilder = $this->createQueryBuilder('p')
            ->select('p')
            ->where('p.inMenu = 1 and p.website = :website')
            ->setParameters(array('website' => $website))
        ;

        return $queryBuilder;
    }

    public function findHomePage($website = null)
    {
        $queryBuilder = $this->createQueryBuilder('p')
            ->select('p')
            ->where('p.type = :type')
            ->setParameter('type', Page::TYPE_HOMEPAGE);
        if($website)
            $queryBuilder
                ->andWhere('p.website = :website')
                ->setParameter('website', is_object($website) ? $website->getId() : $website);

        $query = $queryBuilder->getQuery();

        /*$query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );*/

        $return = $query->getSingleResult();
        return $return;
    }

    public function getMenu($website)
    {
        $queryBuilder = $this->createQueryBuilder('p')
            ->select('p')
            ->leftJoin('DyweeCMSBundle:Page', 'pc', 'with', 'pc.parent = p.id')
            ->where('p.inMenu = 1 and p.website = :website and p.parent is null')
            ->setParameters(array('website' => $website))
            ->orderBy('p.menuOrder', 'asc');

        $query = $queryBuilder->getQuery();

        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );

        return $query->getResult();
    }

    public function findBySeoUrl($url, $website = null)
    {
        $qb = $this->createQueryBuilder('p')
            ->select('p')
            ->where('p.seoUrl = :seoUrl')
            ->setParameter('seoUrl', $url);
        if($website)
            $qb->andWhere('p.website = :website')->setParameter('website', $website);

        $query = $qb->getQuery();

        /*$query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );*/

        $result = $query->getSingleResult();

        return $result;
    }

    public function findById($id, $website = null)
    {
        $qb = $this->createQueryBuilder('p')
            ->select('p')
            ->where('p.id = :id')
            ->setParameter('id', $id);
        if($website)
            $qb->andWhere('p.website = :website')->setParameter('website', is_object($website) ? $website->getId() : $website);

        $query = $qb->getQuery();

        /*$query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );*/

        $result = $query->getSingleResult();

        return $result;
    }

    public function countPage($website, $state = null)
    {
        $qb = $this->createQueryBuilder('p')
            ->select('count(p)')
            ->where('p.website = :website')
            ->setParameter('website', $website)
            ;

        return $qb->getQuery()->getSingleScalarResult();
    }
}
